// This file contains the service definition for sshx, used by the client to
// communicate their terminal state over gRPC.

syntax = "proto3";
package sshx;

service SshxService {
  // Create a new SSH session for a given computer.
  rpc Open(OpenRequest) returns (OpenResponse);

  // Stream real-time commands and terminal outputs to the session.
  rpc Channel(stream ClientUpdate) returns (stream ServerUpdate);

  // Gracefully shut down an existing SSH session.
  rpc Close(CloseRequest) returns (CloseResponse);

  // 文件管理相关的RPC
  rpc ListDirectory(ListDirectoryRequest) returns (ListDirectoryResponse);
  rpc UploadFile(stream FileUploadRequest) returns (UploadFileResult);
  rpc DownloadFile(FileDownloadRequest) returns (stream FileDownloadResponse);
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
  rpc CreateDirectory(CreateDirectoryRequest) returns (CreateDirectoryResponse);
}

// Details of bytes exchanged with the terminal.
message TerminalData {
  uint32 id = 1;  // ID of the shell.
  bytes data = 2; // Encrypted, UTF-8 terminal data.
  uint64 seq = 3; // Sequence number of the first byte.
}

// Details of bytes input to the terminal (not necessarily valid UTF-8).
message TerminalInput {
  uint32 id = 1;     // ID of the shell.
  bytes data = 2;    // Encrypted binary sequence of terminal data.
  uint64 offset = 3; // Offset of the first byte for encryption.
}

// Pair of a terminal ID and its associated size.
message TerminalSize {
  uint32 id = 1;   // ID of the shell.
  uint32 rows = 2; // Number of rows for the terminal.
  uint32 cols = 3; // Number of columns for the terminal.
}

// Request to open an sshx session.
message OpenRequest {
  string origin = 1;                      // Web origin of the server.
  bytes encrypted_zeros = 2;              // Encrypted zero block, for client verification.
  string name = 3;                        // Name of the session (user@hostname).
  optional bytes write_password_hash = 4; // Hashed write password, if read-only mode is enabled.
}

// Details of a newly-created sshx session.
message OpenResponse {
  string name = 1;  // Name of the session.
  string token = 2; // Signed verification token for the client.
  string url = 3;   // Public web URL to view the session.
}

// Sequence numbers for all active shells, used for synchronization.
message SequenceNumbers {
  map<uint32, uint64> map = 1; // Active shells and their sequence numbers.
}

// Data for a new shell.
message NewShell {
  uint32 id = 1; // ID of the shell.
  int32 x = 2;   // X position of the shell.
  int32 y = 3;   // Y position of the shell.
}

// Bidirectional streaming update from the client.
message ClientUpdate {
  string request_id = 1;  // 请求ID，用于关联请求和响应
  oneof client_message {
    string hello = 2;           // First stream message: "name,token".
    TerminalData data = 3;      // Stream data from the terminal.
    NewShell created_shell = 4; // Acknowledge that a new shell was created.
    uint32 closed_shell = 5;    // Acknowledge that a shell was closed.
    fixed64 pong = 14;          // Response for latency measurement.
    string error = 15;
    string kick = 16;

    ListDirectoryResult list_directory_result = 17;
    UploadFileResult upload_file_result = 18;
  }
}

// Bidirectional streaming update from the server.
message ServerUpdate {
  string request_id = 1;  // 请求ID，用于关联请求和响应
  oneof server_message {
    TerminalInput input = 2;   // Remote input bytes, received from the user.
    NewShell create_shell = 3; // ID of a new shell.
    uint32 close_shell = 4;    // ID of a shell to close.
    SequenceNumbers sync = 5;  // Periodic sequence number sync.
    TerminalSize resize = 6;   // Resize a terminal window.
    fixed64 ping = 14;         // Request a pong, with the timestamp.
    string error = 15;
    string kick = 16;

    // 文件管理相关的请求
    ListDirectoryRequest list_directory = 17;
    FileUploadRequest upload_file = 18;
    FileDownloadRequest download_file = 19;
    DeleteFileRequest delete_file = 20;
    CreateDirectoryRequest create_directory = 21;
  }
}

// Request to stop a sshx session gracefully.
message CloseRequest {
  string name = 1;  // Name of the session to terminate.
  string token = 2; // Session verification token.
}

// Server response to closing a session.
message CloseResponse {}

// Snapshot of a session, used to restore state for persistence across servers.
message SerializedSession {
  bytes encrypted_zeros = 1;
  map<uint32, SerializedShell> shells = 2;
  uint32 next_sid = 3;
  uint32 next_uid = 4;
  string name = 5;
  optional bytes write_password_hash = 6;
}

message SerializedShell {
  uint64 seqnum = 1;
  repeated bytes data = 2;
  uint64 chunk_offset = 3;
  uint64 byte_offset = 4;
  bool closed = 5;
  int32 winsize_x = 6;
  int32 winsize_y = 7;
  uint32 winsize_rows = 8;
  uint32 winsize_cols = 9;
}
// 文件管理相关的消息定义
message FileInfo {
  string name = 1;           // 文件名
  bool is_directory = 2;     // 是否是目录
  uint64 size = 3;           // 文件大小(字节)
  uint64 modified_time = 4;  // 最后修改时间
  string permissions = 5;    // 文件权限
}

message ListDirectoryRequest {
  string path = 1;          // 要列出内容的目录路径
  string token = 2;         // 会话验证token
}
message ListDirectoryResponse {
  repeated FileInfo files = 1;  // 目录中的文件和子目录列表
}

message FileUploadRequest {
  string path = 1;          // 目标文件路径
  bytes chunk = 2;          // 文件数据块
  string token = 3;         // 会话验证token
  bool is_last = 4;         // 是否是最后一块数据
}

message FileUploadResponse {
  bool success = 1;         // 上传是否成功
  string message = 2;       // 错误信息(如果有)
}

message FileDownloadRequest {
  string path = 1;          // 要下载的文件路径
  string token = 2;         // 会话验证token
}

message FileDownloadResponse {
  bytes chunk = 1;          // 文件数据块
  bool is_last = 2;         // 是否是最后一块数据
}

message DeleteFileRequest {
  string path = 1;          // 要删除的文件/目录路径
  string token = 2;         // 会话验证token
}

message DeleteFileResponse {
  bool success = 1;         // 删除是否成功
  string message = 2;       // 错误信息(如果有)
}

message CreateDirectoryRequest {
  string path = 1;          // 要创建的目录路径
  string token = 2;         // 会话验证token
}

message CreateDirectoryResponse {
  bool success = 1;         // 创建是否成功
  string message = 2;       // 错误信息(如果有)
}

// 文件管理相关的消息定义
message ListDirectoryResult {
  string request_id = 1;         // 请求ID
  ListDirectoryResponse response = 2;  // 目录列表响应
  optional string error = 3;     // 错误信息
}

message UploadFileResult {
  string request_id = 1;         // 请求ID
  FileUploadResponse response = 2;  // 文件上传响应
  optional string error = 3;     // 错误信息
}

message DownloadFileResult {
  string request_id = 1;         // 请求ID
  FileDownloadResponse response = 2;  // 文件下载响应
  optional string error = 3;     // 错误信息
}

message DeleteFileResult {
  string request_id = 1;         // 请求ID
  DeleteFileResponse response = 2;  // 文件删除响应
  optional string error = 3;     // 错误信息
}

message CreateDirectoryResult {
  string request_id = 1;         // 请求ID
  CreateDirectoryResponse response = 2;  // 目录创建响应
  optional string error = 3;     // 错误信息
}
